use std::{fs, io::Write, path::Path};

use anyhow::Result;
use regex::Regex;
use ts_rs::TS;

use radcam_commands::{
    protocol::display::{
        advanced_display::AdvancedParameterSetting, base_display::BaseParameterSetting,
    },
    CameraControl,
};

fn main() -> Result<()> {
    if let Err(error) = generate_typescript_bindings() {
        println!("Failed generating typecript bindings: {error:?}");
        return Err(error);
    }

    println!("Typescript bindings successifully generated!");

    Ok(())
}

fn generate_typescript_bindings() -> Result<()> {
    // Generate all typescript bindings and join them into a single String
    let bindings = [
        CameraControl::export_to_string()?,
        BaseParameterSetting::export_to_string()?,
        AdvancedParameterSetting::export_to_string()?,
    ]
    .join("\n\n");

    // Remove all typescript "import type" because all types are going to live in the same typescritp file
    let re = Regex::new(r"(?m)^import type .*\n")?;
    let bindings = re.replace_all(bindings.as_str(), "").to_string();

    // Replace all notices by a custom one
    let re = Regex::new(r"(?m)^// This file was generated by .*\n\n")?;
    let mut bindings = re.replace_all(bindings.as_str(), "").to_string();
    let custom_notice_str = "// This file was generated using `cargo run --bin=bindings`. Do not edit this file manually.\n\n";
    bindings.insert_str(0, custom_notice_str);

    // Export to file
    let output_dir = Path::new("../frontend/src/bindings/");
    if !output_dir.exists() {
        std::fs::create_dir_all(output_dir)?;
    }

    let bindings_file_path = output_dir.join(Path::new("camera_control.d.ts"));
    let mut bindings_file = fs::File::create(bindings_file_path)?;
    bindings_file.write_all(bindings.as_bytes())?;

    Ok(())
}
